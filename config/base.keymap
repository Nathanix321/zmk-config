#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires auto-layer module.
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "zmk-helpers/helper.h"

#define BASE 0
#define NUM 1
#define FUN 2
#define NAV 4
#define SYM 5
#define ACC 6
#define MOUSE 7

#define XXX &none
#define ___ &trans

/* Global defaults */

#define QUICK_TAP_MS 175

&sk {
  release-after-ms = <900>;
  quick-release;
};

&sl { // Allow sticky mods to chord across sticky layers.
  ignore-modifiers;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

// Hack: Make HRM combos tap-only (cf, ZMK issue #544).
#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)

/* Combos, mouse emulation */

#include "combos.dtsi" // Must be sourced after HRM-combo hack.
#include "mouse.dtsi"

/* Nav cluster */

// Trigger tap-action on all interrupts.
#define MT_CORE                                                                \
  flavor = "tap-preferred";                                                    \
  tapping-term-ms = <220>;                                                     \
  quick-tap-ms = <220>;                                                        \
  hold-trigger-key-positions = <0>;

&mt { MT_CORE };

ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LEFT   &mt_home 0   LEFT  // Tap: left  | Long-tap: start of line.
#define NAV_RIGHT  &mt_end 0    RIGHT // Tap: right | Long-tap: end   of line.
#define NAV_UP     &mt LC(HOME) UP    // Tap: up    | Long-tap: start of doc.
#define NAV_DOWN   &mt LC(END)  DOWN  // Tap: down  | Long-tap: end   of doc.
#define SMART_BSPC &mt LC(BSPC) BSPC  // Tap: bspc  | Long-tap: delete word bwd.

// Mask CTRL on left/right hold to avoid accidental jumps to start/end of doc.
#define MASK_MODS(NAME, MODS, BINDING)                                         \
  ZMK_MOD_MORPH(NAME, bindings = <BINDING>, <BINDING>; mods = <MODS>;)

MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

&caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
  /delete-property/ ignore-modifiers;
};

/* Arcane keys & auto-layers */

ZMK_ADAPTIVE_KEY(
    arcane_left, bindings = <&arcane_left>;
    kp_a_left     { strict-modifiers; trigger-keys = <A>;     max-prior-idle-ms = <1000>; bindings = <&kp A>;                                        }; // |A|
    kp_b_left     { strict-modifiers; trigger-keys = <B>;     max-prior-idle-ms = <1000>; bindings = <&kp E &kp C &kp A &kp U &kp S &kp E>;          }; // |ECAUSE|
    kp_c_left     { strict-modifiers; trigger-keys = <C>;     max-prior-idle-ms = <1000>; bindings = <&kp A &kp N>;                                  }; // |AN|
    kp_d_left     { strict-modifiers; trigger-keys = <D>;     max-prior-idle-ms = <1000>; bindings = <&kp Y>;                                        }; // |Y|
    kp_e_left     { strict-modifiers; trigger-keys = <E>;     max-prior-idle-ms = <1000>; bindings = <&kp E>;                                        }; // |E|
    kp_f_left     { strict-modifiers; trigger-keys = <F>;     max-prior-idle-ms = <1000>; bindings = <&kp O &kp R>;                                  }; // |OR|
    kp_g_left     { strict-modifiers; trigger-keys = <G>;     max-prior-idle-ms = <1000>; bindings = <&kp E &kp N &kp E &kp R &kp A &kp L>;          }; // |ENERAL|
    kp_h_left     { strict-modifiers; trigger-keys = <H>;     max-prior-idle-ms = <1000>; bindings = <&kp H>;                                        }; // |H|
    kp_i_left     { strict-modifiers; trigger-keys = <I>;     max-prior-idle-ms = <1000>; bindings = <&kp I>;                                        }; // |I|
    kp_j_left     { strict-modifiers; trigger-keys = <J>;     max-prior-idle-ms = <1000>; bindings = <&kp U &kp S &kp T>;                            }; // |UST|
 // kp_k_left     { strict-modifiers; trigger-keys = <K>;     max-prior-idle-ms = <1000>; bindings = <>;                                             }; 
    kp_l_left     { strict-modifiers; trigger-keys = <L>;     max-prior-idle-ms = <1000>; bindings = <&kp K>;                                        }; // |K|
    kp_m_left     { strict-modifiers; trigger-keys = <M>;     max-prior-idle-ms = <1000>; bindings = <&kp E &kp N &kp T>;                            }; // |ENT|
    kp_n_left     { strict-modifiers; trigger-keys = <N>;     max-prior-idle-ms = <1000>; bindings = <&kp I &kp O &kp N>;                            }; // |ION|
    kp_o_left     { strict-modifiers; trigger-keys = <O>;     max-prior-idle-ms = <1000>; bindings = <&kp O>;                                        }; // |O|
    kp_p_left     { strict-modifiers; trigger-keys = <P>;     max-prior-idle-ms = <1000>; bindings = <&kp R &kp E &kp T &kp T &kp Y>;                }; // |RETTY|
    kp_q_left     { strict-modifiers; trigger-keys = <Q>;     max-prior-idle-ms = <1000>; bindings = <&kp Q>;                                        }; // |Q|
    kp_r_left     { strict-modifiers; trigger-keys = <R>;     max-prior-idle-ms = <1000>; bindings = <&kp L>;                                        }; // |L|
    kp_s_left     { strict-modifiers; trigger-keys = <S>;     max-prior-idle-ms = <1000>; bindings = <&kp K>;                                        }; // |K|
    kp_t_left     { strict-modifiers; trigger-keys = <T>;     max-prior-idle-ms = <1000>; bindings = <&kp T>;                                        }; // |T|
    kp_u_left     { strict-modifiers; trigger-keys = <U>;     max-prior-idle-ms = <1000>; bindings = <&kp U>;                                        }; // |U|
 // kp_v_left     { strict-modifiers; trigger-keys = <V>;     max-prior-idle-ms = <1000>; bindings = <>;                                             };
    kp_w_left     { strict-modifiers; trigger-keys = <W>;     max-prior-idle-ms = <1000>; bindings = <&kp H &kp I &kp C &kp H>;                      }; // |HICH|
    kp_x_left     { strict-modifiers; trigger-keys = <X>;     max-prior-idle-ms = <1000>; bindings = <&kp X>;                                        }; // |X|
    kp_y_left     { strict-modifiers; trigger-keys = <Y>;     max-prior-idle-ms = <1000>; bindings = <&kp Y>;                                        }; // |Y|
    kp_z_left     { strict-modifiers; trigger-keys = <Z>;     max-prior-idle-ms = <1000>; bindings = <&kp Z>;                                        }; // |Z|
 // kp_space_left { strict-modifiers; trigger-keys = <SPACE>; max-prior-idle-ms = <1000>; bindings = <>;                                             }; 
    kp_dot_left   { strict-modifiers; trigger-keys = <DOT>;   max-prior-idle-ms = <1000>; bindings = <&kp DOT>;                                      }; // |.|
 // kp_comma_left { strict-modifiers; trigger-keys = <COMMA>; max-prior-idle-ms = <1000>; bindings = <>;                                             };
    kp_pound_left { strict-modifiers; trigger-keys = <POUND>; max-prior-idle-ms = <1000>; bindings = <&kp D &kp E &kp F &kp I &kp N &kp E &kp SPACE>;}; // |DEFINE |
)

ZMK_ADAPTIVE_KEY(
    arcane_right, bindings = <&arcane_right>;
    kp_a_right     { strict-modifiers; trigger-keys = <A>;     max-prior-idle-ms = <1000>; bindings = <&kp N &kp D &kp SPACE>;                              }; // |ND |
    kp_b_right     { strict-modifiers; trigger-keys = <B>;     max-prior-idle-ms = <1000>; bindings = <&kp B>;                                              }; // |B|
    kp_c_right     { strict-modifiers; trigger-keys = <C>;     max-prior-idle-ms = <1000>; bindings = <&kp C>;                                              }; // |C|
    kp_d_right     { strict-modifiers; trigger-keys = <D>;     max-prior-idle-ms = <1000>; bindings = <&kp D>;                                              }; // |D|
    kp_e_right     { strict-modifiers; trigger-keys = <E>;     max-prior-idle-ms = <1000>; bindings = <&kp U>;                                              }; // |U|
    kp_f_right     { strict-modifiers; trigger-keys = <F>;     max-prior-idle-ms = <1000>; bindings = <&kp F>;                                              }; // |F|
    kp_g_right     { strict-modifiers; trigger-keys = <G>;     max-prior-idle-ms = <1000>; bindings = <&kp G>;                                              }; // |G|
 // kp_h_right     { strict-modifiers; trigger-keys = <H>;     max-prior-idle-ms = <1000>; bindings = <&kp>;                                                };
    kp_i_right     { strict-modifiers; trigger-keys = <I>;     max-prior-idle-ms = <1000>; bindings = <&kp O &kp N>;                                        }; // |ON|
    kp_j_right     { strict-modifiers; trigger-keys = <J>;     max-prior-idle-ms = <1000>; bindings = <&kp J>;                                              }; // |J|
    kp_k_right     { strict-modifiers; trigger-keys = <K>;     max-prior-idle-ms = <1000>; bindings = <&kp K>;                                              }; // |K|
    kp_l_right     { strict-modifiers; trigger-keys = <L>;     max-prior-idle-ms = <1000>; bindings = <&kp L>;                                              }; // |L|
    kp_m_right     { strict-modifiers; trigger-keys = <M>;     max-prior-idle-ms = <1000>; bindings = <&kp M>;                                              }; // |M|
    kp_n_right     { strict-modifiers; trigger-keys = <N>;     max-prior-idle-ms = <1000>; bindings = <&kp N>;                                              }; // |N|
    kp_o_right     { strict-modifiers; trigger-keys = <O>;     max-prior-idle-ms = <1000>; bindings = <&kp A>;                                              }; // |A|
    kp_p_right     { strict-modifiers; trigger-keys = <P>;     max-prior-idle-ms = <1000>; bindings = <&kp P>;                                              }; // |P|
    kp_q_right     { strict-modifiers; trigger-keys = <Q>;     max-prior-idle-ms = <1000>; bindings = <&kp U &kp E &kp E &kp N>;                            }; // |UEEN|
    kp_r_right     { strict-modifiers; trigger-keys = <R>;     max-prior-idle-ms = <1000>; bindings = <&kp R>;                                              }; // |R|
    kp_s_right     { strict-modifiers; trigger-keys = <S>;     max-prior-idle-ms = <1000>; bindings = <&kp S>;                                              }; // |S|
    kp_t_right     { strict-modifiers; trigger-keys = <T>;     max-prior-idle-ms = <1000>; bindings = <&kp M &kp E &kp N &kp T>;                            }; // |MENT|
    kp_u_right     { strict-modifiers; trigger-keys = <U>;     max-prior-idle-ms = <1000>; bindings = <&kp E>;                                              }; // |E|
    kp_v_right     { strict-modifiers; trigger-keys = <V>;     max-prior-idle-ms = <1000>; bindings = <&kp V>;                                              }; // |V|
    kp_w_right     { strict-modifiers; trigger-keys = <W>;     max-prior-idle-ms = <1000>; bindings = <&kp W>;                                              }; // |W|
 // kp_x_right     { strict-modifiers; trigger-keys = <X>;     max-prior-idle-ms = <1000>; bindings = <&kp>;                                                };
    kp_y_right     { strict-modifiers; trigger-keys = <Y>;     max-prior-idle-ms = <1000>; bindings = <&kp E &kp A &kp H>;                                  }; // |EAH|
 // kp_z_right     { strict-modifiers; trigger-keys = <Z>;     max-prior-idle-ms = <1000>; bindings = <&kp>;                                                };
    kp_space_right { strict-modifiers; trigger-keys = <SPACE>; max-prior-idle-ms = <1000>; bindings = <&kp T &kp H &kp E &kp SPACE>;                        }; // |THE |
    kp_dot_right   { strict-modifiers; trigger-keys = <DOT>;   max-prior-idle-ms = <1000>; bindings = <&kp FSLH>;                                           }; // |/|
    kp_comma_right { strict-modifiers; trigger-keys = <COMMA>; max-prior-idle-ms = <1000>; bindings = <&kp B &kp U &kp T>;                                  }; // |BUT|
    kp_pound_right { strict-modifiers; trigger-keys = <POUND>; max-prior-idle-ms = <1000>; bindings = <&kp I &kp N &kp C &kp L &kp U &kp D &kp E &kp SPACE>;}; // |INCLUDE |
)

// Tap: num-word | Hold: num-layer.
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_word>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)

// Smart-mouse, requires tri-state module.
ZMK_TRI_STATE(
    smart_mouse, bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
    ignored-key-positions =
        <LT4 LT3 LT2 LT1 LT0 LM4 LM3 LM2 LM1 LM0 LB4 LB3 LB2 LB1 LB0 LH2 LH1 LH0 RT1 RT3 RH0 RH1 RH2>
    ignored-layers = <MOUSE NAV FN>;)

/* Custom behaviors */

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

// Tap: comma | Shift + tap: semicolon.
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &kp SEMICOLON)

// Tap: dot | Shift + tap: colon.
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &kp COLON)

// Tap: question mark | Shift + tap: exclamation point.
SIMPLE_MORPH(qexcl_morph, SFT, &kp QMARK, &kp EXCL)

/* Keymap */

#ifndef ZMK_BASE_LAYER
  #define ZMK_BASE_LAYER(name, LT, RT, LM, RM, LB, RB, LH, RH)                 \
      ZMK_LAYER(name, LT RT LM RM LB RB LH RH)
#endif

ZMK_BASE_LAYER(Base,
//╭─────────────┬─────────────┬─────────────┬───────────────┬──────────────────────╮ ╭─────────────────────┬─────────────┬───────────────────┬─────────────┬─────────────╮
    &kp Q         &kp W         &kp F         &kp P           &kp B                ,   &kp J                 &kp L         &kp U               &kp Y         &kp SQT     ,
//├─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼─────────────┼─────────────┤
    &hml LGUI A   &hml LALT R   &hml LSHFT S  &hml LCTRL T    &kp G                ,   &kp M                 &hmr LCTRL N  &hmr RSHFT E        &hmr LALT I   &hmr LGUI O ,
//├─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼─────────────┼─────────────┤
    &kp Z         &kp X         &kp C         &kp D           &kp V                ,   &kp K                 &kp H         &comma_morph        &dot_morph    &qexcl      ,
//╰─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼───────────────────────────╯
                                SMART_NUM     &lt FUN SPACE   &mt LSHFT ARCANE_LEFT,   &lt NAV ARCANE_RIGHT  &lt SYM T     &lt ACC SMART_BSPC
//                            ╰─────────────┴───────────────┴──────────────────────╯ ╰─────────────────────┴─────────────┴───────────────────╯
)

ZMK_BASE_LAYER(Num,
//╭─────────────┬─────────────┬─────────────┬───────────────┬──────────────────────╮ ╭─────────────────────┬─────────────┬───────────────────┬─────────────┬─────────────╮
    &kp Q         &kp W         &kp F         &kp P           &kp B                ,   &kp J                 &kp L         &kp U               &kp Y         &kp SQT     ,
//├─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼─────────────┼─────────────┤
    &hml LGUI A   &hml LALT R   &hml LSHFT S  &hml LCTRL T    &kp G                ,   &kp M                 &hmr LCTRL N  &hmr RSHFT E        &hmr LALT I   &hmr LGUI O ,
//├─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼─────────────┼─────────────┤
    &kp Z         &kp X         &kp C         &kp D           &kp V                ,   &kp K                 &kp H         &comma_morph        &dot_morph    &qexcl      ,
//╰─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼───────────────────────────╯
                                SMART_NUM     &lt FUN SPACE   &mt LSHFT ARCANE_LEFT,   &lt NAV ARCANE_RIGHT  &lt SYM T     &lt ACC SMART_BSPC
//                            ╰─────────────┴───────────────┴──────────────────────╯ ╰─────────────────────┴─────────────┴───────────────────╯
)

ZMK_BASE_LAYER(Fun,
//╭─────────────┬─────────────┬─────────────┬───────────────┬──────────────────────╮ ╭─────────────────────┬─────────────┬───────────────────┬─────────────┬─────────────╮
    &kp Q         &kp W         &kp F         &kp P           &kp B                ,   &kp J                 &kp L         &kp U               &kp Y         &kp SQT     ,
//├─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼─────────────┼─────────────┤
    &hml LGUI A   &hml LALT R   &hml LSHFT S  &hml LCTRL T    &kp G                ,   &kp M                 &hmr LCTRL N  &hmr RSHFT E        &hmr LALT I   &hmr LGUI O ,
//├─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼─────────────┼─────────────┤
    &kp Z         &kp X         &kp C         &kp D           &kp V                ,   &kp K                 &kp H         &comma_morph        &dot_morph    &qexcl      ,
//╰─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼───────────────────────────╯
                                SMART_NUM     &lt FUN SPACE   &mt LSHFT ARCANE_LEFT,   &lt NAV ARCANE_RIGHT  &lt SYM T     &lt ACC SMART_BSPC
//                            ╰─────────────┴───────────────┴──────────────────────╯ ╰─────────────────────┴─────────────┴───────────────────╯
)

ZMK_BASE_LAYER(Nav,
//╭─────────────┬─────────────┬─────────────┬───────────────┬──────────────────────╮ ╭─────────────────────┬─────────────┬───────────────────┬─────────────┬─────────────╮
    &kp Q         &kp W         &kp F         &kp P           &kp B                ,   &kp J                 &kp L         &kp U               &kp Y         &kp SQT     ,
//├─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼─────────────┼─────────────┤
    &hml LGUI A   &hml LALT R   &hml LSHFT S  &hml LCTRL T    &kp G                ,   &kp M                 &hmr LCTRL N  &hmr RSHFT E        &hmr LALT I   &hmr LGUI O ,
//├─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼─────────────┼─────────────┤
    &kp Z         &kp X         &kp C         &kp D           &kp V                ,   &kp K                 &kp H         &comma_morph        &dot_morph    &qexcl      ,
//╰─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼───────────────────────────╯
                                SMART_NUM     &lt FUN SPACE   &mt LSHFT ARCANE_LEFT,   &lt NAV ARCANE_RIGHT  &lt SYM T     &lt ACC SMART_BSPC
//                            ╰─────────────┴───────────────┴──────────────────────╯ ╰─────────────────────┴─────────────┴───────────────────╯
)

ZMK_BASE_LAYER(Sym,
//╭─────────────┬─────────────┬─────────────┬───────────────┬──────────────────────╮ ╭─────────────────────┬─────────────┬───────────────────┬─────────────┬─────────────╮
    &kp Q         &kp W         &kp F         &kp P           &kp B                ,   &kp J                 &kp L         &kp U               &kp Y         &kp SQT     ,
//├─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼─────────────┼─────────────┤
    &hml LGUI A   &hml LALT R   &hml LSHFT S  &hml LCTRL T    &kp G                ,   &kp M                 &hmr LCTRL N  &hmr RSHFT E        &hmr LALT I   &hmr LGUI O ,
//├─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼─────────────┼─────────────┤
    &kp Z         &kp X         &kp C         &kp D           &kp V                ,   &kp K                 &kp H         &comma_morph        &dot_morph    &qexcl      ,
//╰─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼───────────────────────────╯
                                SMART_NUM     &lt FUN SPACE   &mt LSHFT ARCANE_LEFT,   &lt NAV ARCANE_RIGHT  &lt SYM T     &lt ACC SMART_BSPC
//                            ╰─────────────┴───────────────┴──────────────────────╯ ╰─────────────────────┴─────────────┴───────────────────╯
)

ZMK_BASE_LAYER(Acc,
//╭─────────────┬─────────────┬─────────────┬───────────────┬──────────────────────╮ ╭─────────────────────┬─────────────┬───────────────────┬─────────────┬─────────────╮
    &kp Q         &kp W         &kp F         &kp P           &kp B                ,   &kp J                 &kp L         &kp U               &kp Y         &kp SQT     ,
//├─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼─────────────┼─────────────┤
    &hml LGUI A   &hml LALT R   &hml LSHFT S  &hml LCTRL T    &kp G                ,   &kp M                 &hmr LCTRL N  &hmr RSHFT E        &hmr LALT I   &hmr LGUI O ,
//├─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼─────────────┼─────────────┤
    &kp Z         &kp X         &kp C         &kp D           &kp V                ,   &kp K                 &kp H         &comma_morph        &dot_morph    &qexcl      ,
//╰─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼───────────────────────────╯
                                SMART_NUM     &lt FUN SPACE   &mt LSHFT ARCANE_LEFT,   &lt NAV ARCANE_RIGHT  &lt SYM T     &lt ACC SMART_BSPC
//                            ╰─────────────┴───────────────┴──────────────────────╯ ╰─────────────────────┴─────────────┴───────────────────╯
)

ZMK_BASE_LAYER(Mouse,
//╭─────────────┬─────────────┬─────────────┬───────────────┬──────────────────────╮ ╭─────────────────────┬─────────────┬───────────────────┬─────────────┬─────────────╮
    &kp Q         &kp W         &kp F         &kp P           &kp B                ,   &kp J                 &kp L         &kp U               &kp Y         &kp SQT     ,
//├─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼─────────────┼─────────────┤
    &hml LGUI A   &hml LALT R   &hml LSHFT S  &hml LCTRL T    &kp G                ,   &kp M                 &hmr LCTRL N  &hmr RSHFT E        &hmr LALT I   &hmr LGUI O ,
//├─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼─────────────┼─────────────┤
    &kp Z         &kp X         &kp C         &kp D           &kp V                ,   &kp K                 &kp H         &comma_morph        &dot_morph    &qexcl      ,
//╰─────────────┼─────────────┼─────────────┼───────────────┼──────────────────────┤ ├─────────────────────┼─────────────┼───────────────────┼───────────────────────────╯
                                SMART_NUM     &lt FUN SPACE   &mt LSHFT ARCANE_LEFT,   &lt NAV ARCANE_RIGHT  &lt SYM T     &lt ACC SMART_BSPC
//                            ╰─────────────┴───────────────┴──────────────────────╯ ╰─────────────────────┴─────────────┴───────────────────╯
)